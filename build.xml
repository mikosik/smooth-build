<project xmlns:ivy="antlib:org.apache.ivy.ant" name="smooth-build" default="all">

    <property name="zipped.dir" value="smooth"/>

    <property name="dir.lib" location="lib"/>
    <property name="dir.src" location="src"/>
    <property name="dir.src.main.java" location="${dir.src}/main/java"/>
    <property name="dir.src.main.test" location="${dir.src}/main/test"/>
    <property name="dir.src.main.script" location="${dir.src}/main/script"/>
    <property name="dir.src.slib.java" location="${dir.src}/slib/java"/>
    <property name="dir.src.slib.smooth" location="${dir.src}/slib/smooth"/>
    <property name="dir.src.slib.test" location="${dir.src}/slib/test"/>
    <property name="dir.src.testing.java" location="${dir.src}/testing/java"/>
    <property name="dir.src.testing.test" location="${dir.src}/testing/test"/>
    <property name="dir.src.systemtest" location="${dir.src}/systemtest"/>
    <property name="dir.build" location="build"/>
    <property name="dir.build.java" location="${dir.build}/java"/>
    <property name="dir.build.java.smooth-parser" location="${dir.build.java}/org/smoothbuild/antlr/lang"/>
    <property name="dir.build.java.task-matcher-parser" location="${dir.build.java}/org/smoothbuild/antlr/taskmatcher"/>
    <property name="dir.build.class" location="${dir.build}/class"/>
    <property name="dir.build.class.main.java" location="${dir.build.class}/main/java"/>
    <property name="dir.build.class.main.test" location="${dir.build.class}/main/test"/>
    <property name="dir.build.class.slib.java" location="${dir.build.class}/slib/java"/>
    <property name="dir.build.class.slib.test" location="${dir.build.class}/slib/test"/>
    <property name="dir.build.class.testing.java" location="${dir.build.class}/testing/java"/>
    <property name="dir.build.class.testing.test" location="${dir.build.class}/testing/test"/>
    <property name="dir.build.class.systemtest" location="${dir.build.class}/systemtest"/>
    <property name="dir.build.jar" location="${dir.build}/jar"/>
    <property name="dir.build.smooth.jar" location="${dir.build.jar}/smooth.jar"/>
    <property name="dir.build.slib.jar" location="${dir.build.jar}/slib.jar"/>
    <property name="dir.build.release" location="${dir.build}/release"/>
    <property name="dir.build.release.file" location="${dir.build.release}/smooth.zip"/>
    <property name="dir.build.systemtest" location="${dir.build}/systemtest"/>

    <property name="lib.antlr4" value="${dir.lib}/ivy/antlr4-4.9.2.jar"/>
    <property name="lib.antlr4-runtime" value="${dir.lib}/ivy/antlr4-runtime-4.9.2.jar"/>
    <property name="lib.antlr3-runtime" value="${dir.lib}/ivy/antlr-runtime-3.5.2.jar"/>
    <property name="lib.stringtemplate4" value="${dir.lib}/ivy/ST4-4.3.jar"/>
    <property name="lib.aopalliance" value="${dir.lib}/ivy/aopalliance-1.0.jar"/>
    <property name="lib.failureaccess" value="${dir.lib}/ivy/failureaccess-1.0.1.jar"/>
    <property name="lib.guava" value="${dir.lib}/ivy/guava-31.0.1-jre.jar"/>
    <property name="lib.guava-testlib" value="${dir.lib}/ivy/guava-testlib-31.0.1-jre.jar"/>
    <property name="lib.guice" value="${dir.lib}/ivy/guice-5.0.1.jar"/>
    <property name="lib.hamcrest" value="${dir.lib}/ivy/hamcrest-core-1.3.jar"/>
    <property name="lib.hamcrest-library" value="${dir.lib}/ivy/hamcrest-library-1.3.jar"/>
    <property name="lib.javax.inject" value="${dir.lib}/ivy/javax.inject-1.jar"/>
    <property name="lib.mockito" value="${dir.lib}/ivy/mockito-core-3.10.0.jar"/>
    <property name="lib.byte-buddy" value="${dir.lib}/ivy/byte-buddy-1.11.0.jar"/>
    <property name="lib.byte-buddy-agent" value="${dir.lib}/ivy/byte-buddy-agent-1.11.0.jar"/>
    <property name="lib.objenesis" value="${dir.lib}/ivy/objenesis-3.2.jar"/>
    <property name="lib.okio" value="${dir.lib}/ivy/okio-2.10.0.jar"/>
    <property name="lib.kotlin-stdlib" value="${dir.lib}/ivy/kotlin-stdlib-1.4.20.jar"/>
    <property name="lib.kotlin-stdlib-common"
              value="${dir.lib}/ivy/kotlin-stdlib-common-1.4.20.jar"/>
    <property name="lib.truth" value="${dir.lib}/ivy/truth-1.1.3.jar"/>
    <property name="lib.diffutils" value="${dir.lib}/ivy/diffutils-1.3.0.jar"/>
    <property name="lib.picocli" value="${dir.lib}/ivy/picocli-4.6.1.jar"/>
    <property name="lib.zip4j" value="${dir.lib}/ivy/zip4j-2.11.2.jar"/>

    <target name="init">
        <delete dir="${dir.build}"/>
        <delete dir="lib/ivy"/>

        <mkdir dir="${dir.build.class.main.java}"/>
        <mkdir dir="${dir.build.class.main.test}"/>
        <mkdir dir="${dir.build.class.slib.java}"/>
        <mkdir dir="${dir.build.class.slib.test}"/>
        <mkdir dir="${dir.build.class.testing.java}"/>
        <mkdir dir="${dir.build.class.testing.test}"/>
        <mkdir dir="${dir.build.class.systemtest}"/>
        <mkdir dir="${dir.build.jar}"/>
        <mkdir dir="${dir.build.release}"/>
        <mkdir dir="${dir.build.systemtest}"/>

        <ivy:retrieve pattern="lib/ivy/[artifact]-[revision](-[classifier]).[ext]"/>
    </target>

    <target name="generate-lang-parser" depends="init">
        <java classname="org.antlr.v4.Tool" fork="true" dir="src/main/antlr" failonerror="true">
            <arg line="-o ${dir.build.java.smooth-parser}"/>
            <arg line="-package org.smoothbuild.antlr.lang"/>
            <arg line="-visitor"/>
            <arg line="Smooth.g4"/>
            <classpath>
                <pathelement location="${lib.antlr4}"/>
                <pathelement location="${lib.antlr4-runtime}"/>
                <pathelement location="${lib.antlr3-runtime}"/>
                <pathelement location="${lib.stringtemplate4}"/>
            </classpath>
        </java>
    </target>

    <target name="generate-task-filter-parser" depends="init">
        <java classname="org.antlr.v4.Tool" fork="true" dir="src/main/antlr" failonerror="true">
            <arg line="-o ${dir.build.java.task-matcher-parser}"/>
            <arg line="-package org.smoothbuild.antlr.taskmatcher"/>
            <arg line="-visitor"/>
            <arg line="TaskMatcher.g4"/>
            <classpath>
                <pathelement location="${lib.antlr4}"/>
                <pathelement location="${lib.antlr4-runtime}"/>
                <pathelement location="${lib.antlr3-runtime}"/>
                <pathelement location="${lib.stringtemplate4}"/>
            </classpath>
        </java>
    </target>

    <path id="classpath-with.junit-platform">
        <pathelement location="${dir.lib}/ivy/junit-platform-commons-1.7.2.jar"/>
        <pathelement location="${dir.lib}/ivy/junit-platform-engine-1.7.2.jar"/>
        <pathelement location="${dir.lib}/ivy/junit-platform-launcher-1.7.2.jar"/>
        <pathelement location="${dir.lib}/ivy/junit-4.13.2.jar"/>
        <pathelement location="${dir.lib}/ivy/junit-jupiter-api-5.7.2.jar"/>
        <pathelement location="${dir.lib}/ivy/junit-jupiter-params-5.7.2.jar"/>
        <pathelement location="${dir.lib}/ivy/junit-jupiter-engine-5.7.2.jar"/>
        <pathelement location="${dir.lib}/ivy/apiguardian-api-1.1.0.jar"/>
        <pathelement location="${dir.lib}/ivy/opentest4j-1.2.0.jar"/>
    </path>

    <!-- compile src/main/java -->

    <path id="classpath-for.main.java">
        <pathelement location="${lib.antlr4-runtime}"/>
        <pathelement location="${lib.aopalliance}"/>
        <pathelement location="${lib.failureaccess}"/>
        <pathelement location="${lib.guava}"/>
        <pathelement location="${lib.guice}"/>
        <pathelement location="${lib.javax.inject}"/>
        <pathelement location="${lib.kotlin-stdlib}"/>
        <pathelement location="${lib.kotlin-stdlib-common}"/>
        <pathelement location="${lib.okio}"/>
        <pathelement location="${lib.picocli}"/>
        <pathelement location="${lib.zip4j}"/>
    </path>

    <target name="compile.main.java" depends="generate-lang-parser, generate-task-filter-parser">
        <javac destdir="${dir.build.class.main.java}"
               source="18"
               debug="true"
               includeantruntime="false"
               debuglevel="lines,vars,source">
            <compilerarg value="--enable-preview"/>
            <src path="${dir.src.main.java}"/>
            <src path="${dir.build.java.smooth-parser}"/>
            <src path="${dir.build.java.task-matcher-parser}"/>
            <classpath>
                <path refid="classpath-for.main.java"/>
            </classpath>
        </javac>
    </target>

    <path id="classpath-with.main.java">
        <path refid="classpath-for.main.java"/>
        <pathelement location="${dir.build.class.main.java}"/>
    </path>

    <!-- compile src/slib/java -->

    <path id="classpath-for.slib.java">
        <path refid="classpath-with.main.java"/>
    </path>

    <target name="compile.slib.java" depends="compile.main.java">
        <javac destdir="${dir.build.class.slib.java}"
               source="18"
               debug="true"
               includeantruntime="false"
               debuglevel="lines,vars,source">
            <compilerarg value="--enable-preview"/>
            <src path="${dir.src.slib.java}"/>
            <classpath>
                <path refid="classpath-for.slib.java"/>
            </classpath>
        </javac>
    </target>

    <path id="classpath-with.slib.java">
        <path refid="classpath-for.slib.java"/>
        <pathelement location="${dir.build.class.slib.java}"/>
    </path>

    <!-- compile src/testing/java -->

    <path id="classpath-for.testing.java">
        <path refid="classpath-with.main.java"/>
        <path refid="classpath-with.junit-platform"/>
        <pathelement location="${lib.guava-testlib}"/>
        <pathelement location="${lib.hamcrest}"/>
        <pathelement location="${lib.truth}"/>
    </path>

    <target name="compile.testing.java" depends="compile.main.java">
        <javac destdir="${dir.build.class.testing.java}"
               source="18"
               debug="true"
               includeantruntime="false"
               debuglevel="lines,vars,source">
            <compilerarg value="--enable-preview"/>
            <src path="${dir.src.testing.java}"/>
            <classpath>
                <path refid="classpath-for.testing.java"/>
            </classpath>
        </javac>
    </target>

    <path id="classpath-with.testing.java">
        <path refid="classpath-for.testing.java"/>
        <pathelement location="${dir.build.class.testing.java}"/>
    </path>

    <!-- classpath with testing frameworks/libs -->

    <path id="classpath.testing.libs">
        <pathelement location="${lib.guava-testlib}"/>
        <pathelement location="${lib.hamcrest-library}"/>
        <pathelement location="${lib.truth}"/>
        <pathelement location="${lib.diffutils}"/>
        <pathelement location="${lib.mockito}"/>
        <pathelement location="${lib.byte-buddy}"/>
        <pathelement location="${lib.byte-buddy-agent}"/>
        <pathelement location="${lib.objenesis}"/>
    </path>

    <!-- compile src/main/test -->

    <path id="classpath-for.main.test">
        <path refid="classpath-with.testing.java"/>
        <path refid="classpath.testing.libs"/>
    </path>

    <target name="compile.main.test" depends="compile.testing.java">
        <javac destdir="${dir.build.class.main.test}"
               source="18"
               debug="true"
               includeantruntime="false"
               debuglevel="lines,vars,source">
            <compilerarg value="--enable-preview"/>
            <src path="${dir.src.main.test}"/>
            <classpath>
                <path refid="classpath-for.main.test"/>
            </classpath>
        </javac>
    </target>

    <path id="classpath-with.main.test">
        <path refid="classpath-for.main.test"/>
        <pathelement location="${dir.build.class.main.test}"/>
    </path>

    <!-- compile src/slib/test -->

    <path id="classpath-for.slib.test">
        <path refid="classpath-with.testing.java"/>
        <path refid="classpath-with.slib.java"/>
        <path refid="classpath.testing.libs"/>
    </path>

    <target name="compile.slib.test" depends="compile.slib.java, compile.testing.java">
        <javac destdir="${dir.build.class.slib.test}"
               source="18"
               debug="true"
               includeantruntime="false"
               debuglevel="lines,vars,source">
            <compilerarg value="--enable-preview"/>
            <src path="${dir.src.slib.test}"/>
            <classpath>
                <path refid="classpath-for.slib.test"/>
            </classpath>
        </javac>
    </target>

    <path id="classpath-with.slib.test">
        <path refid="classpath-for.slib.test"/>
        <pathelement location="${dir.build.class.slib.test}"/>
    </path>

    <!-- compile src/testing/test -->

    <path id="classpath-for.testing.test">
        <path refid="classpath-with.testing.java"/>
        <path refid="classpath.testing.libs"/>
    </path>

    <target name="compile.testing.test" depends="compile.testing.java">
        <javac destdir="${dir.build.class.testing.test}"
               source="18"
               debug="true"
               includeantruntime="false"
               debuglevel="lines,vars,source">
            <compilerarg value="--enable-preview"/>
            <src path="${dir.src.testing.test}"/>
            <classpath>
                <path refid="classpath-for.testing.test"/>
            </classpath>
        </javac>
    </target>

    <path id="classpath-with.testing.test">
        <path refid="classpath-for.testing.test"/>
        <pathelement location="${dir.build.class.testing.test}"/>
    </path>

    <!-- compile src/systemtest -->

    <path id="classpath.for.systemtest">
        <path refid="classpath-with.testing.java"/>
        <path refid="classpath-with.slib.java"/>
        <path refid="classpath.testing.libs"/>
    </path>

    <target name="compile.systemtest.tests" depends="compile.testing.java">
        <javac destdir="${dir.build.class.systemtest}"
               source="18"
               debug="true"
               includeantruntime="false"
               debuglevel="lines,vars,source">
            <compilerarg value="--enable-preview"/>
            <src path="${dir.src.systemtest}"/>
            <classpath>
                <path refid="classpath.for.systemtest"/>
            </classpath>
        </javac>
    </target>

    <path id="classpath.with.systemtest">
        <path refid="classpath.for.systemtest"/>
        <pathelement location="${dir.build.class.systemtest}"/>
    </path>

    <!-- run src/testing/test -->

    <target name="run.testing.test" depends="compile.testing.test">
        <junitlauncher haltonfailure="yes">
            <classpath>
                <path refid="classpath-with.testing.test"/>
            </classpath>
            <listener type="legacy-plain"/>
            <testclasses outputdir="${dir.build}">
                <fileset dir="${dir.build.class.testing.test}" includes="**/*Test.class"/>
                <fork>
                    <sysproperty key="junit.jupiter.execution.parallel.enabled" value="true"/>
                    <sysproperty key="junit.jupiter.execution.parallel.mode.default" value="concurrent"/>
                    <jvmarg value="--enable-preview"/>
                </fork>
            </testclasses>
        </junitlauncher>
    </target>

    <!-- run src/main/test -->

    <target name="run.main.test" depends="compile.main.test" description="runs main.test">
        <junitlauncher haltonfailure="yes">
            <classpath>
                <path refid="classpath-with.main.test"/>
            </classpath>
            <listener type="legacy-plain"/>
            <testclasses outputdir="${dir.build}">
                <fileset dir="${dir.build.class.main.test}" includes="**/*Test.class"/>
                <fork>
                    <sysproperty key="junit.jupiter.execution.parallel.enabled" value="true"/>
                    <sysproperty key="junit.jupiter.execution.parallel.mode.default" value="concurrent"/>
                    <jvmarg value="--enable-preview"/>
                </fork>
            </testclasses>
        </junitlauncher>
    </target>

    <!-- run src/slib/test -->

    <target name="run.slib.test" depends="compile.slib.test">
        <junitlauncher haltonfailure="yes">
            <classpath>
                <path refid="classpath-with.slib.test"/>
            </classpath>
            <listener type="legacy-plain"/>
            <testclasses outputdir="${dir.build}">
                <fileset dir="${dir.build.class.slib.test}" includes="**/*Test.class"/>
                <fork>
                    <sysproperty key="junit.jupiter.execution.parallel.enabled" value="true"/>
                    <sysproperty key="junit.jupiter.execution.parallel.mode.default" value="concurrent"/>
                    <jvmarg value="--enable-preview"/>
                </fork>
            </testclasses>
        </junitlauncher>
    </target>

    <!-- build slib.jar file -->

    <target name="slib.jar" depends="compile.slib.java">
        <jar destfile="${dir.build.slib.jar}">
            <zipfileset dir="${dir.build.class.slib.java}"/>
            <zipfileset file="LICENSE"/>
        </jar>
    </target>

    <!-- build smooth.jar file -->

    <target name="smooth.jar" depends="compile.main.java">
        <jar destfile="${dir.build.smooth.jar}">
            <zipfileset src="${lib.antlr4-runtime}" excludes="* META-INF/**"/>
            <zipfileset src="${lib.aopalliance}"  excludes="* META-INF/**"/>
            <zipfileset src="${lib.failureaccess}" excludes="* META-INF/**"/>
            <zipfileset src="${lib.guava}"        excludes="* META-INF/**"/>
            <zipfileset src="${lib.guice}"        excludes="* META-INF/**"/>
            <zipfileset src="${lib.javax.inject}" excludes="* META-INF/**"/>
        	<zipfileset src="${lib.kotlin-stdlib}" excludes="* META-INF/**"/>
        	<zipfileset src="${lib.kotlin-stdlib-common}" excludes="* META-INF/**"/>
        	<zipfileset src="${lib.okio}" excludes="* META-INF/**"/>
        	<zipfileset src="${lib.picocli}" excludes="* META-INF/**"/>
        	<zipfileset src="${lib.zip4j}" excludes="* META-INF/**"/>

            <zipfileset dir="${dir.build.class.main.java}"/>
            <zipfileset file="LICENSE"/>
        </jar>
    </target>

    <!-- build smooth.zip release -->

    <target name="release" depends="smooth.jar, slib.jar">
        <zip destfile="${dir.build.release.file}" level="9">
            <zipfileset prefix="${zipped.dir}" file="${dir.build.smooth.jar}"/>
            <zipfileset prefix="${zipped.dir}/lib" file="${dir.build.slib.jar}"/>
            <zipfileset prefix="${zipped.dir}/lib" file="${dir.src.slib.smooth}/slib.smooth"/>
            <zipfileset prefix="${zipped.dir}" file="${dir.src.main.script}/smooth" filemode="755"/>
        </zip>
    </target>

    <!-- run src/systemtest -->
    <target name="install-smooth" depends="release">
        <unzip src="${dir.build.release.file}" dest="${dir.build.systemtest}"/>
        <chmod file="${dir.build.systemtest}/${zipped.dir}/smooth" perm="u+x"/>
    </target>

    <target name="run.systemtest.single-jvm" depends="compile.systemtest.tests, install-smooth"
            description="runs systemtest tests">
        <junitlauncher haltonfailure="yes">
            <classpath>
                <path refid="classpath.with.systemtest"/>
            </classpath>
            <listener type="legacy-plain"/>
            <testclasses outputdir="${dir.build}">
                <fileset dir="${dir.build.class.systemtest}" includes="**/*Test.class"/>
                <fork>
                    <sysproperty key="junit.jupiter.execution.parallel.enabled" value="true"/>
                    <sysproperty key="junit.jupiter.execution.parallel.mode.default" value="concurrent"/>
                    <env key="smooth_home_dir" value="${dir.build.systemtest}/${zipped.dir}"/>
                    <env key="repository_dir" value="${basedir}"/>
                    <env key="systemtest-test-mode" value="single-jvm"/>
                    <jvmarg value="--enable-preview"/>
                </fork>
            </testclasses>
        </junitlauncher>
    </target>

    <target name="run.systemtest.full-binary" depends="compile.systemtest.tests, install-smooth"
            description="runs systemtest tests">
        <junitlauncher haltonfailure="yes">
            <classpath>
                <path refid="classpath.with.systemtest"/>
            </classpath>
            <listener type="legacy-plain"/>
            <testclasses outputdir="${dir.build}">
                <fileset dir="${dir.build.class.systemtest}" includes="**/*Test.class"/>
                <fork>
                    <sysproperty key="junit.jupiter.execution.parallel.enabled" value="true"/>
                    <sysproperty key="junit.jupiter.execution.parallel.mode.default" value="concurrent"/>
                    <env key="smooth_home_dir" value="${dir.build.systemtest}/${zipped.dir}"/>
                    <env key="repository_dir" value="${basedir}"/>
                    <env key="systemtest-test-mode" value="full-binary"/>
                    <jvmarg value="--enable-preview"/>
                </fork>
            </testclasses>
        </junitlauncher>
    </target>

    <target name="run.all.test"
            depends="run.testing.test, run.main.test, run.slib.test, run.systemtest.single-jvm, run.systemtest.full-binary">
    </target>

    <target name="all" depends="release, run.all.test"/>
</project>

