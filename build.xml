<project name="smooth-build" basedir="." default="all">

    <property name="zipped.dir" value="smooth"/>

    <property name="dir.lib" location="lib"/>
    <property name="dir.src" location="src"/>
    <property name="dir.src.main.java" location="${dir.src}/main/java"/>
    <property name="dir.src.main.test" location="${dir.src}/main/test"/>
    <property name="dir.src.func.java" location="${dir.src}/func/java"/>
    <property name="dir.src.func.test" location="${dir.src}/func/test"/>
    <property name="dir.src.testing.java" location="${dir.src}/testing/java"/>
    <property name="dir.src.testing.test" location="${dir.src}/testing/test"/>
    <property name="dir.src.acceptance" location="${dir.src}/acceptance"/>
    <property name="dir.src.script" location="${dir.src}/script"/>
    <property name="dir.build" location="build"/>
    <property name="dir.build.java" location="${dir.build}/java"/>
    <property name="dir.build.java.parser" location="${dir.build.java}/org/smoothbuild/antlr"/>
    <property name="dir.build.class" location="${dir.build}/class"/>
    <property name="dir.build.class.main.java" location="${dir.build.class}/main/java"/>
    <property name="dir.build.class.main.test" location="${dir.build.class}/main/test"/>
    <property name="dir.build.class.func.java" location="${dir.build.class}/func/java"/>
    <property name="dir.build.class.func.test" location="${dir.build.class}/func/test"/>
    <property name="dir.build.class.testing.java" location="${dir.build.class}/testing/java"/>
    <property name="dir.build.class.testing.test" location="${dir.build.class}/testing/test"/>
    <property name="dir.build.class.acceptance" location="${dir.build.class}/acceptance"/>
    <property name="dir.build.jar" location="${dir.build}/jar"/>
    <property name="dir.build.smooth.jar" location="${dir.build.jar}/smooth.jar"/>
    <property name="dir.build.funcs.jar" location="${dir.build.jar}/funcs.jar"/>
    <property name="dir.build.release" location="${dir.build}/release"/>
    <property name="dir.build.release.file" location="${dir.build.release}/smooth.zip"/>
    <property name="dir.build.acceptance" location="${dir.build}/acceptance"/>

    <property name="lib.antlr" value="${dir.lib}/antlr-4.1-complete.jar"/>
    <property name="lib.antlr.license" value="${dir.lib}/antlr.LICENSE"/>
    <property name="lib.aopalliance" value="${dir.lib}/aopalliance.jar"/>
    <property name="lib.guava" value="${dir.lib}/guava-17.0.jar"/>
    <property name="lib.guava.license" value="${dir.lib}/guava.LICENSE"/>
    <property name="lib.guava-testlib" value="${dir.lib}/guava-testlib-17.0.jar"/>
    <property name="lib.guice" value="${dir.lib}/guice-3.0.jar"/>
    <property name="lib.guice.license" value="${dir.lib}/guice.LICENSE"/>
    <property name="lib.hamcrest" value="${dir.lib}/hamcrest-core-1.3.jar"/>
    <property name="lib.hamcrest.license" value="${dir.lib}/hamcrest-core.LICENSE"/>
    <property name="lib.hamcrest-library" value="${dir.lib}/hamcrest-library-1.3.jar"/>
    <property name="lib.javax.inject" value="${dir.lib}/javax.inject.jar"/>
    <property name="lib.junit" value="${dir.lib}/junit-4.12.jar"/>
    <property name="lib.junit.license" value="${dir.lib}/junit.LICENSE"/>
    <property name="lib.quackery" value="${dir.lib}/quackery-0.13.0.jar"/>
    <property name="lib.testory" value="${dir.lib}/testory-1.0.0.jar"/>

    <target name="init">
        <delete dir="${dir.build}"/>

        <mkdir dir="${dir.build.java.parser}"/>
        <mkdir dir="${dir.build.class.main.java}"/>
        <mkdir dir="${dir.build.class.main.test}"/>
        <mkdir dir="${dir.build.class.func.java}"/>
        <mkdir dir="${dir.build.class.func.test}"/>
        <mkdir dir="${dir.build.class.testing.java}"/>
        <mkdir dir="${dir.build.class.testing.test}"/>
        <mkdir dir="${dir.build.class.acceptance}"/>
        <mkdir dir="${dir.build.jar}"/>
        <mkdir dir="${dir.build.release}"/>
        <mkdir dir="${dir.build.acceptance}"/>
    </target>

    <target name="generate-java-grammar" depends="init">
        <java classname="org.antlr.v4.Tool" fork="true" failonerror="true">
            <arg line="-o ${dir.build.java.parser}"/>
            <arg line="-package org.smoothbuild.antlr"/>
            <arg line="-visitor"/>
            <arg line="Smooth.g4"/>
            <classpath>
                <pathelement location="${dir.lib}/antlr-4.1-complete.jar"/>
            </classpath>
        </java>
    </target>

    <!-- compile src/main/java -->

    <path id="classpath.for.main.java">
        <pathelement location="${lib.antlr}"/>
        <pathelement location="${lib.aopalliance}"/>
        <pathelement location="${lib.guava}"/>
        <pathelement location="${lib.guice}"/>
        <pathelement location="${lib.javax.inject}"/>
    </path>

    <target name="compile-main.java" depends="generate-java-grammar">
        <javac destdir="${dir.build.class.main.java}"
               debug="true"
               includeantruntime="false"
               debuglevel="lines,vars,source">
            <src path="${dir.src.main.java}"/>
            <src path="${dir.build.java.parser}"/>
            <classpath>
                <path refid="classpath.for.main.java"/>
            </classpath>
        </javac>
    </target>

    <path id="classpath.with.main.java">
        <path refid="classpath.for.main.java"/>
        <pathelement location="${dir.build.class.main.java}"/>
    </path>


    <!-- compile src/func/java -->

    <path id="classpath.for.func.java">
        <path refid="classpath.with.main.java"/>
        <!-- TODO can be removed once junit function becomes separate plugin -->
        <pathelement location="${lib.junit}"/>
    </path>

    <target name="compile-func.java" depends="compile-main.java">
        <javac destdir="${dir.build.class.func.java}"
               debug="true"
               includeantruntime="false"
               debuglevel="lines,vars,source">
            <compilerarg value="-parameters"/>
            <src path="${dir.src.func.java}"/>
            <classpath>
                <path refid="classpath.for.func.java"/>
            </classpath>
        </javac>
    </target>

    <path id="classpath.with.func.java">
        <path refid="classpath.for.func.java"/>
        <pathelement location="${dir.build.class.func.java}"/>
    </path>

    <!-- compile src/testing/java -->

    <path id="classpath.for.main.testing.java">
        <path refid="classpath.with.main.java"/>
        <pathelement location="${lib.hamcrest}"/>
        <pathelement location="${lib.junit}"/>
        <pathelement location="${lib.quackery}"/>
    </path>

    <target name="compile-testing.java" depends="compile-main.java">
        <javac destdir="${dir.build.class.testing.java}"
               debug="true"
               includeantruntime="false"
               debuglevel="lines,vars,source">
            <src path="${dir.src.testing.java}"/>
            <classpath>
                <path refid="classpath.for.main.testing.java"/>
            </classpath>
        </javac>
    </target>

    <path id="classpath.with.testing.java">
        <path refid="classpath.for.main.testing.java"/>
        <pathelement location="${dir.build.class.testing.java}"/>
    </path>

    <!-- compile src/main/test -->

    <path id="classpath.for.main.test">
        <path refid="classpath.with.testing.java"/>
        <pathelement location="${lib.guava-testlib}"/>
        <pathelement location="${lib.hamcrest-library}"/>
        <pathelement location="${lib.junit}"/>
        <pathelement location="${lib.testory}"/>
    </path>

    <target name="compile-main.test" depends="compile-testing.java">
        <javac destdir="${dir.build.class.main.test}"
               debug="true"
               includeantruntime="false"
               debuglevel="lines,vars,source">
            <compilerarg value="-parameters"/>
            <src path="${dir.src.main.test}"/>
            <classpath>
                <path refid="classpath.for.main.test"/>
            </classpath>
        </javac>
    </target>

    <path id="classpath.with.main.test">
        <path refid="classpath.for.main.test"/>
        <pathelement location="${dir.build.class.main.test}"/>
    </path>

    <!-- compile src/func/test -->

    <path id="classpath.for.func.test">
        <path refid="classpath.with.testing.java"/>
        <path refid="classpath.with.func.java"/>
        <pathelement location="${lib.hamcrest-library}"/>
        <pathelement location="${lib.junit}"/>
        <pathelement location="${lib.testory}"/>
    </path>

    <target name="compile-func.test" depends="compile-func.java, compile-testing.java">
        <javac destdir="${dir.build.class.func.test}"
               debug="true"
               includeantruntime="false"
               debuglevel="lines,vars,source">
            <src path="${dir.src.func.test}"/>
            <classpath>
                <path refid="classpath.for.func.test"/>
            </classpath>
        </javac>
    </target>

    <path id="classpath.with.func.test">
        <path refid="classpath.for.func.test"/>
        <pathelement location="${dir.build.class.func.test}"/>
    </path>

    <!-- compile src/testing/test -->

    <path id="classpath.for.testing.test">
        <path refid="classpath.with.testing.java"/>
        <pathelement location="${lib.guava-testlib}"/>
        <pathelement location="${lib.hamcrest-library}"/>
        <pathelement location="${lib.junit}"/>
        <pathelement location="${lib.testory}"/>
    </path>

    <target name="compile-testing.test" depends="compile-testing.java">
        <javac destdir="${dir.build.class.testing.test}"
               debug="true"
               includeantruntime="false"
               debuglevel="lines,vars,source">
            <src path="${dir.src.testing.test}"/>
            <classpath>
                <path refid="classpath.for.testing.test"/>
            </classpath>
        </javac>
    </target>

    <path id="classpath.with.testing.test">
        <path refid="classpath.for.testing.test"/>
        <pathelement location="${dir.build.class.testing.test}"/>
    </path>

    <!-- compile src/acceptance -->

    <path id="classpath.for.acceptance">
        <path refid="classpath.with.testing.java"/>
        <path refid="classpath.with.func.java"/>
        <pathelement location="${lib.hamcrest-library}"/>
        <pathelement location="${lib.testory}"/>
    </path>

    <target name="compile-acceptance-tests" depends="compile-testing.java">
        <javac destdir="${dir.build.class.acceptance}"
               debug="true"
               includeantruntime="false"
               debuglevel="lines,vars,source">
            <compilerarg value="-parameters"/>
            <src path="${dir.src.acceptance}"/>
            <classpath>
                <path refid="classpath.for.acceptance"/>
            </classpath>
        </javac>
    </target>

    <path id="classpath.with.acceptance">
        <path refid="classpath.for.acceptance"/>
        <pathelement location="${dir.build.class.acceptance}"/>
    </path>

    <!-- run src/testing/test -->

    <target name="run-testing.test" depends="compile-testing.test">
        <junit haltonfailure="yes" reloading="false" fork="true" forkmode="perBatch" tempdir="${dir.build}">
            <classpath>
                <path refid="classpath.with.testing.test"/>
            </classpath>
            <formatter type="brief" usefile="false"/>
            <batchtest todir="${dir.build}">
                <fileset dir="${dir.build.class.testing.test}" includes="**/*Test.class"/>
            </batchtest>
        </junit>
    </target>

    <!-- run src/main/test -->

    <target name="run-main.test" depends="compile-main.test" description="runs main.test">
        <junit haltonfailure="yes" reloading="false" fork="true" forkmode="perBatch" tempdir="${dir.build}">
            <classpath>
                <path refid="classpath.with.main.test"/>
            </classpath>
            <formatter type="brief" usefile="false"/>
            <batchtest todir="${dir.build}">
                <fileset dir="${dir.build.class.main.test}" includes="**/*Test.class"/>
            </batchtest>
        </junit>
    </target>

    <!-- run src/func/test -->

    <target name="run-func.test" depends="compile-func.test">
        <junit haltonfailure="yes" reloading="false" fork="true" forkmode="perBatch" tempdir="${dir.build}">
            <classpath>
                <path refid="classpath.with.func.test"/>
            </classpath>
            <formatter type="brief" usefile="false"/>
            <batchtest todir="${dir.build}">
                <fileset dir="${dir.build.class.func.test}" includes="**/*Test.class"/>
            </batchtest>
        </junit>
    </target>

    <!-- build funcs.jar file -->

    <target name="funcs-jar-file" depends="compile-func.java">
        <jar destfile="${dir.build.funcs.jar}">
            <!-- TODO can be removed once junit function becomes separate plugin -->
            <zipfileset excludes="* META-INF/**" src="${lib.junit}"/>
            <zipfileset excludes="* META-INF/**" src="${lib.hamcrest}"/>

            <zipfileset dir="${dir.build.class.func.java}"/>
            <zipfileset file="LICENSE"/>

            <!-- TODO can be removed once junit function becomes separate plugin -->
            <zipfileset file="${lib.junit.license}"/>
            <zipfileset file="${lib.hamcrest.license}"/>
        </jar>
    </target>

    <!-- build smooth.jar file -->

    <target name="smooth-jar-file" depends="compile-main.java">
        <jar destfile="${dir.build.smooth.jar}">
            <zipfileset src="${lib.antlr}"        excludes="* META-INF/**"/>
            <zipfileset src="${lib.aopalliance}"  excludes="* META-INF/**"/>
            <zipfileset src="${lib.guava}"        excludes="* META-INF/**"/>
            <zipfileset src="${lib.guice}"        excludes="* META-INF/**"/>
            <zipfileset src="${lib.javax.inject}" excludes="* META-INF/**"/>

            <zipfileset dir="${dir.build.class.main.java}"/>
            <zipfileset file="LICENSE"/>

            <zipfileset file="${lib.antlr.license}"/>
            <zipfileset file="${lib.guava.license}"/>
            <zipfileset file="${lib.guice.license}"/>
        </jar>
    </target>

    <!-- build smooth.zip release -->

    <target name="release" depends="smooth-jar-file, funcs-jar-file">
        <zip destfile="${dir.build.release.file}" level="9">
            <zipfileset prefix="${zipped.dir}" file="${dir.build.smooth.jar}"/>
            <zipfileset prefix="${zipped.dir}/lib" file="${dir.build.funcs.jar}"/>
            <zipfileset prefix="${zipped.dir}" file="${dir.src.script}/smooth" filemode="755"/>
        </zip>
    </target>

    <!-- run src/acceptance -->
    <target name="install-smooth" depends="compile-acceptance-tests, release">
        <unzip src="${dir.build.release.file}" dest="${dir.build.acceptance}"/>
        <zip destfile="${dir.build.acceptance}/${zipped.dir}/lib/testing-funcs.jar">
            <zipfileset dir="${dir.build.class.acceptance}" includes="org/smoothbuild/acceptance/TestingFunctions**"/>
        </zip>
        <chmod file="${dir.build.acceptance}/${zipped.dir}/smooth" perm="u+x"/>
    </target>

    <target name="run-acceptance" depends="compile-acceptance-tests, install-smooth"
            description="runs acceptance tests">
        <junit haltonfailure="yes" reloading="false" fork="yes" forkmode="perBatch" tempdir="${dir.build}">
            <classpath>
                <path refid="classpath.with.acceptance"/>
            </classpath>
            <env key="smooth_home_dir" value="${dir.build.acceptance}/${zipped.dir}"/>
            <formatter type="brief" usefile="false"/>
            <batchtest todir="${dir.build}">
                <fileset dir="${dir.build.class.acceptance}" includes="**/*Test.class"/>
            </batchtest>
        </junit>
    </target>

    <target name="run-all.test" depends="run-testing.test, run-main.test, run-func.test, run-acceptance">
    </target>

    <target name="all" depends="release, run-all.test"/>
</project>

