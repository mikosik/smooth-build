
File {
  Blob content,
  String path,
}

@Native("org.smoothbuild.stdlib.bool.NotFunc")
Bool not(Bool value);

Bool and(Bool first, Bool second) = if(first, second, false);

Bool or(Bool first, Bool second) = if(first, true, second);

@Native("org.smoothbuild.stdlib.common.EqualFunc")
Bool equal<A>(A first, A second);

@Bytecode("org.smoothbuild.stdlib.array.ElemFunc")
A elem<A>([A] array, Int index);

@Native("org.smoothbuild.stdlib.array.SizeFunc")
Int size<A>([A] array);

@Native("org.smoothbuild.stdlib.array.ConcatFunc")
[A] concat<A>([[A]] array);

@NativeImpure("org.smoothbuild.stdlib.file.FileFunc")
File file(String path);

@NativeImpure("org.smoothbuild.stdlib.file.FilesFunc")
[File] files(String dir);

[A] filter<A>([A] array, (A)->Bool predicate) =
    filterByMask(array, map(array, predicate));

@Native("org.smoothbuild.stdlib.core.FilterByMaskFunc")
[A] filterByMask<A>([A] array, [Bool] filter);

@Native("org.smoothbuild.stdlib.file.FilterFilesFunc")
[File] filterFiles([File] files, String pattern);

File jarFile([File] files, String path, Blob manifest = 0x) =
    jar(files, manifest) > File(path);

@Native("org.smoothbuild.stdlib.java.JarFunc")
Blob jar([File] files, Blob manifest = 0x);

[File] javac(
  [File] srcs,
  [File] libs = [],
  String source = "1.8",
  String target = "1.8",
  [String] options = [],
) = javac_(
    srcs = srcs,
    libs = jarsToFiles(libs),
    options = concat([["-source", source, "-target", target], options]));

@Native("org.smoothbuild.stdlib.java.javac.JavacFunc")
[File] javac_([File] srcs, [[File]] libs = [], [String] options = []);

String junit(File tests, [File] deps = [], String include = "**Test.class") =
    junit_(unzip(tests.content), jarsToFiles(deps), include);

@Native("org.smoothbuild.stdlib.java.junit.JunitFunc")
String junit_([File] tests, [[File]] deps, String include);

[[File]] jarsToFiles([File] libs) =
  map(libs, (File lib) -> filterFiles(unzip(lib.content), "**.class"));

@Native("org.smoothbuild.stdlib.string.ToBlobFunc")
Blob toBlob(String string);

@Native("org.smoothbuild.stdlib.blob.ToStringFunc")
String toString(Blob blob);

@Native("org.smoothbuild.stdlib.java.UnjarFunc")
[File] unjar(Blob jar);

@Native("org.smoothbuild.stdlib.compress.UnzipFunc")
[File] unzip(Blob blob);

@Native("org.smoothbuild.stdlib.compress.ZipFunc")
Blob zip([File] files);

A id<A>(A a) = a;

@Native("org.smoothbuild.stdlib.core.ErrorFunc")
A error<A>(String message);

@Bytecode("org.smoothbuild.stdlib.core.IfFunc")
A if<A>(Bool condition, A then, A else);

@Bytecode("org.smoothbuild.stdlib.core.MapFunc")
[R] map<S,R>([S] array, (S)->R mapper);

@Bytecode("org.smoothbuild.stdlib.core.FoldFunc")
A fold<A,E>([E] array, A initial, (A,E)->A folder);

@Bytecode("org.smoothbuild.stdlib.bool.False")
Bool false;

@Bytecode("org.smoothbuild.stdlib.bool.True")
Bool true;
