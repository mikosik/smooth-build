
File {
  Blob content,
  String path,
}

@Native("org.smoothbuild.slib.bool.TrueValue")
Bool true;

@Native("org.smoothbuild.slib.bool.FalseValue")
Bool false;

@Native("org.smoothbuild.slib.bool.NotFunction")
Bool not(
  Bool value,
);

Bool and(
  Bool first,
  Bool second,
) = if(first, second, false);

Bool or(
  Bool first,
  Bool second,
) = if (first, true, second);

@Native("org.smoothbuild.slib.common.EqualFunction")
Bool equal(
  A first,
  A second,
);

@Native("org.smoothbuild.slib.common.ConcatFunction")
[A] concat(
  [A] array1,
  [A] array2,
);

@Native("org.smoothbuild.slib.file.ProjectFileFunction", IMPURE)
File projectFile(
  String path,
);

@Native("org.smoothbuild.slib.file.ProjectFilesFunction", IMPURE)
[File] projectFiles(
  String dir,
);

@Native("org.smoothbuild.slib.file.FilterFunction")
[File] filter(
  [File] files,
  String pattern,
);

@Native("org.smoothbuild.slib.java.JarFunction")
Blob jar(
  [File] files,
  Blob manifest = 0x,
);

[File] javac(
  [File] srcs,
  [File] libs = [],
  String source = "1.8",
  String target = "1.8",
  [String] options = [],
) = javac_(
    srcs = srcs,
    libs = libs,
    options = concat(["-source", source, "-target", target], options));

@Native("org.smoothbuild.slib.java.javac.JavacFunction")
[File] javac_(
  [File] srcs,
  [File] libs = [],
  [String] options = [],
);

@Native("org.smoothbuild.slib.java.junit.JunitFunction")
String junit(
  File tests,
  [File] deps = [],
  String include = "**Test.class",
);

@Native("org.smoothbuild.slib.string.ToBlobFunction")
Blob toBlob(
  String string,
);

@Native("org.smoothbuild.slib.blob.ToStringFunction")
String toString(
  Blob blob,
);

@Native("org.smoothbuild.slib.java.UnjarFunction")
[File] unjar(
  Blob jar,
);

@Native("org.smoothbuild.slib.compress.UnzipFunction")
[File] unzip(
  Blob blob,
);

@Native("org.smoothbuild.slib.compress.ZipFunction")
Blob zip(
  [File] files,
);

A id(A a) = a;
