SModule(
  types = [
  ]
  evaluables = [
    empty=sPolyEvaluable(
      typeParams = [A]
      evaluable = SNamedExprValue(
        type = [A]
        fqn = empty
        location = {t-project}/module.smooth:5
        body = SOrder(
          evaluationType = [A]
          elements = [
          ]
          location = {t-project}/module.smooth:5
        )
      )
    )
    myFunc~param1=sPolyEvaluable(
      typeParams = [A]
      evaluable = SNamedExprValue(
        type = [A]
        fqn = myFunc~param1
        location = {t-project}/module.smooth:3
        body = SInstantiate(
          typeArgs = <A>
          polymorphic = SPolyReference(
            typeScheme = <A>[A]
            referencedName = empty
            location = {t-project}/module.smooth:3
          )
          evaluationType = [A]
          location = {t-project}/module.smooth:3
        )
      )
    )
    myFunc=sPolyEvaluable(
      typeParams = [B]
      evaluable = SNamedExprFunc(
        fqn = myFunc
        type = ([B])->Int
        params = [
          SItem(
            type = [B]
            fqn = myFunc:param1
            defaultValue = Some(SDefaultValue(
              fqn = myFunc~param1
            ))
            location = {t-project}/module.smooth:2
          )
        ]
        location = {t-project}/module.smooth:1
        body = SInt(
          type = Int
          bigInteger = 7
          location = {t-project}/module.smooth:4
        )
      )
    )
  ]
  scope = SScope(
    types = [
      Blob -> STypeDefinition(
        type = Blob
        fqn = Blob
        location = internal
      )
      Bool -> STypeDefinition(
        type = Bool
        fqn = Bool
        location = internal
      )
      Int -> STypeDefinition(
        type = Int
        fqn = Int
        location = internal
      )
      String -> STypeDefinition(
        type = String
        fqn = String
        location = internal
      )
        <empty bindings>
          <empty bindings>
    ]
    evaluables = [
      <empty bindings>
        <empty bindings>
          empty -> sPolyEvaluable(
            typeParams = [A]
            evaluable = SNamedExprValue(
              type = [A]
              fqn = empty
              location = {t-project}/module.smooth:5
              body = SOrder(
                evaluationType = [A]
                elements = [
                ]
                location = {t-project}/module.smooth:5
              )
            )
          )
          myFunc~param1 -> sPolyEvaluable(
            typeParams = [A]
            evaluable = SNamedExprValue(
              type = [A]
              fqn = myFunc~param1
              location = {t-project}/module.smooth:3
              body = SInstantiate(
                typeArgs = <A>
                polymorphic = SPolyReference(
                  typeScheme = <A>[A]
                  referencedName = empty
                  location = {t-project}/module.smooth:3
                )
                evaluationType = [A]
                location = {t-project}/module.smooth:3
              )
            )
          )
          myFunc -> sPolyEvaluable(
            typeParams = [B]
            evaluable = SNamedExprFunc(
              fqn = myFunc
              type = ([B])->Int
              params = [
                SItem(
                  type = [B]
                  fqn = myFunc:param1
                  defaultValue = Some(SDefaultValue(
                    fqn = myFunc~param1
                  ))
                  location = {t-project}/module.smooth:2
                )
              ]
              location = {t-project}/module.smooth:1
              body = SInt(
                type = Int
                bigInteger = 7
                location = {t-project}/module.smooth:4
              )
            )
          )
    ]
  )
)