SModule(
  types = [
  ]
  evaluables = [
    returnInt=sPolyEvaluable(
      typeParams = []
      evaluable = SNamedExprFunc(
        fqn = returnInt
        type = ()->Int
        params = [
        ]
        location = {t-project}/module.smooth:1
        body = SInt(
          type = Int
          bigInteger = 7
          location = {t-project}/module.smooth:1
        )
      )
    )
    result=sPolyEvaluable(
      typeParams = []
      evaluable = SNamedExprValue(
        type = {()->Int}
        fqn = result
        location = {t-project}/module.smooth:2
        body = SCombine(
          evaluationType = {()->Int}
          elements = [
            SInstantiate(
              typeArgs = <>
              polymorphic = SPolyReference(
                typeScheme = <>()->Int
                referencedName = returnInt
                location = {t-project}/module.smooth:3
              )
              evaluationType = ()->Int
              location = {t-project}/module.smooth:3
            )
          ]
          location = {t-project}/module.smooth:2
        )
      )
    )
  ]
  scope = SScope(
    types = [
      Blob -> STypeDefinition(
        type = Blob
        fqn = Blob
        location = internal
      )
      Bool -> STypeDefinition(
        type = Bool
        fqn = Bool
        location = internal
      )
      Int -> STypeDefinition(
        type = Int
        fqn = Int
        location = internal
      )
      String -> STypeDefinition(
        type = String
        fqn = String
        location = internal
      )
        <empty bindings>
          <empty bindings>
    ]
    evaluables = [
      <empty bindings>
        <empty bindings>
          returnInt -> sPolyEvaluable(
            typeParams = []
            evaluable = SNamedExprFunc(
              fqn = returnInt
              type = ()->Int
              params = [
              ]
              location = {t-project}/module.smooth:1
              body = SInt(
                type = Int
                bigInteger = 7
                location = {t-project}/module.smooth:1
              )
            )
          )
          result -> sPolyEvaluable(
            typeParams = []
            evaluable = SNamedExprValue(
              type = {()->Int}
              fqn = result
              location = {t-project}/module.smooth:2
              body = SCombine(
                evaluationType = {()->Int}
                elements = [
                  SInstantiate(
                    typeArgs = <>
                    polymorphic = SPolyReference(
                      typeScheme = <>()->Int
                      referencedName = returnInt
                      location = {t-project}/module.smooth:3
                    )
                    evaluationType = ()->Int
                    location = {t-project}/module.smooth:3
                  )
                ]
                location = {t-project}/module.smooth:2
              )
            )
          )
    ]
  )
)