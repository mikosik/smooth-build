SModule(
  types = [
  ]
  evaluables = [
    result=sPolyEvaluable(
      typeParams = []
      evaluable = SNamedExprFunc(
        fqn = result
        type = ((Blob)->String)->String
        params = [
          SItem(
            type = (Blob)->String
            fqn = result:f
            defaultValue = None
            location = {t-project}/module.smooth:2
          )
        ]
        location = {t-project}/module.smooth:1
        body = SCall(
          callee = SMonoReference(
            type = (Blob)->String
            referencedName = f
            location = {t-project}/module.smooth:3
          )
          args = SCombine(
            evaluationType = {Blob}
            elements = [
              SBlob(
                type = Blob
                byteString = 0x09
                location = {t-project}/module.smooth:3
              )
            ]
            location = {t-project}/module.smooth:3
          )
          location = {t-project}/module.smooth:3
        )
      )
    )
  ]
  scope = SScope(
    types = [
      Blob -> STypeDefinition(
        type = Blob
        fqn = Blob
        location = internal
      )
      Bool -> STypeDefinition(
        type = Bool
        fqn = Bool
        location = internal
      )
      Int -> STypeDefinition(
        type = Int
        fqn = Int
        location = internal
      )
      String -> STypeDefinition(
        type = String
        fqn = String
        location = internal
      )
        <empty bindings>
          <empty bindings>
    ]
    evaluables = [
      <empty bindings>
        <empty bindings>
          result -> sPolyEvaluable(
            typeParams = []
            evaluable = SNamedExprFunc(
              fqn = result
              type = ((Blob)->String)->String
              params = [
                SItem(
                  type = (Blob)->String
                  fqn = result:f
                  defaultValue = None
                  location = {t-project}/module.smooth:2
                )
              ]
              location = {t-project}/module.smooth:1
              body = SCall(
                callee = SMonoReference(
                  type = (Blob)->String
                  referencedName = f
                  location = {t-project}/module.smooth:3
                )
                args = SCombine(
                  evaluationType = {Blob}
                  elements = [
                    SBlob(
                      type = Blob
                      byteString = 0x09
                      location = {t-project}/module.smooth:3
                    )
                  ]
                  location = {t-project}/module.smooth:3
                )
                location = {t-project}/module.smooth:3
              )
            )
          )
    ]
  )
)