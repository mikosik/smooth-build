SModule(
  types = [
  ]
  evaluables = [
    result=sPolyEvaluable(
      typeParams = []
      evaluable = SNamedExprValue(
        type = [Blob]
        fqn = result
        location = {t-project}/module.smooth:1
        body = SOrder(
          evaluationType = [Blob]
          elements = [
            SBlob(
              type = Blob
              byteString = 0x07
              location = {t-project}/module.smooth:1
            )
            SBlob(
              type = Blob
              byteString = 0x08
              location = {t-project}/module.smooth:3
            )
          ]
          location = {t-project}/module.smooth:2
        )
      )
    )
  ]
  scope = SScope(
    types = [
      Blob -> STypeDefinition(
        type = Blob
        fqn = Blob
        location = internal
      )
      Bool -> STypeDefinition(
        type = Bool
        fqn = Bool
        location = internal
      )
      Int -> STypeDefinition(
        type = Int
        fqn = Int
        location = internal
      )
      String -> STypeDefinition(
        type = String
        fqn = String
        location = internal
      )
        <empty bindings>
          <empty bindings>
    ]
    evaluables = [
      <empty bindings>
        <empty bindings>
          result -> sPolyEvaluable(
            typeParams = []
            evaluable = SNamedExprValue(
              type = [Blob]
              fqn = result
              location = {t-project}/module.smooth:1
              body = SOrder(
                evaluationType = [Blob]
                elements = [
                  SBlob(
                    type = Blob
                    byteString = 0x07
                    location = {t-project}/module.smooth:1
                  )
                  SBlob(
                    type = Blob
                    byteString = 0x08
                    location = {t-project}/module.smooth:3
                  )
                ]
                location = {t-project}/module.smooth:2
              )
            )
          )
    ]
  )
)