SModule(
  types = [
  ]
  evaluables = [
    myId=sPolyEvaluable(
      typeParams = [A]
      evaluable = SNamedExprFunc(
        fqn = myId
        type = (A)->A
        params = [
          SItem(
            type = A
            fqn = myId:a
            defaultValue = None
            location = {t-project}/module.smooth:1
          )
        ]
        location = {t-project}/module.smooth:1
        body = SMonoReference(
          type = A
          referencedName = a
          location = {t-project}/module.smooth:1
        )
      )
    )
    result=sPolyEvaluable(
      typeParams = []
      evaluable = SNamedExprValue(
        type = (Int)->Int
        fqn = result
        location = {t-project}/module.smooth:2
        body = SInstantiate(
          typeArgs = <Int>
          polymorphic = SPolyReference(
            typeScheme = <A>(A)->A
            referencedName = myId
            location = {t-project}/module.smooth:3
          )
          evaluationType = (Int)->Int
          location = {t-project}/module.smooth:3
        )
      )
    )
  ]
  scope = SScope(
    types = [
      Blob -> STypeDefinition(
        type = Blob
        fqn = Blob
        location = internal
      )
      Bool -> STypeDefinition(
        type = Bool
        fqn = Bool
        location = internal
      )
      Int -> STypeDefinition(
        type = Int
        fqn = Int
        location = internal
      )
      String -> STypeDefinition(
        type = String
        fqn = String
        location = internal
      )
        <empty bindings>
          <empty bindings>
    ]
    evaluables = [
      <empty bindings>
        <empty bindings>
          myId -> sPolyEvaluable(
            typeParams = [A]
            evaluable = SNamedExprFunc(
              fqn = myId
              type = (A)->A
              params = [
                SItem(
                  type = A
                  fqn = myId:a
                  defaultValue = None
                  location = {t-project}/module.smooth:1
                )
              ]
              location = {t-project}/module.smooth:1
              body = SMonoReference(
                type = A
                referencedName = a
                location = {t-project}/module.smooth:1
              )
            )
          )
          result -> sPolyEvaluable(
            typeParams = []
            evaluable = SNamedExprValue(
              type = (Int)->Int
              fqn = result
              location = {t-project}/module.smooth:2
              body = SInstantiate(
                typeArgs = <Int>
                polymorphic = SPolyReference(
                  typeScheme = <A>(A)->A
                  referencedName = myId
                  location = {t-project}/module.smooth:3
                )
                evaluationType = (Int)->Int
                location = {t-project}/module.smooth:3
              )
            )
          )
    ]
  )
)