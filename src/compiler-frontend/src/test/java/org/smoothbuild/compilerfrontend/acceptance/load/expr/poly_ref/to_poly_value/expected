SModule(
  types = [
  ]
  evaluables = [
    myValue=sPolyEvaluable(
      typeParams = [A]
      evaluable = SNamedExprValue(
        type = [A]
        fqn = myValue
        location = {t-project}/module.smooth:1
        body = SOrder(
          evaluationType = [A]
          elements = [
          ]
          location = {t-project}/module.smooth:1
        )
      )
    )
    result=sPolyEvaluable(
      typeParams = []
      evaluable = SNamedExprValue(
        type = [Int]
        fqn = result
        location = {t-project}/module.smooth:2
        body = SInstantiate(
          typeArgs = <Int>
          polymorphic = SPolyReference(
            typeScheme = <A>[A]
            referencedName = myValue
            location = {t-project}/module.smooth:3
          )
          evaluationType = [Int]
          location = {t-project}/module.smooth:3
        )
      )
    )
  ]
  scope = SScope(
    types = [
      Blob -> STypeDefinition(
        type = Blob
        fqn = Blob
        location = internal
      )
      Bool -> STypeDefinition(
        type = Bool
        fqn = Bool
        location = internal
      )
      Int -> STypeDefinition(
        type = Int
        fqn = Int
        location = internal
      )
      String -> STypeDefinition(
        type = String
        fqn = String
        location = internal
      )
        <empty bindings>
          <empty bindings>
    ]
    evaluables = [
      <empty bindings>
        <empty bindings>
          myValue -> sPolyEvaluable(
            typeParams = [A]
            evaluable = SNamedExprValue(
              type = [A]
              fqn = myValue
              location = {t-project}/module.smooth:1
              body = SOrder(
                evaluationType = [A]
                elements = [
                ]
                location = {t-project}/module.smooth:1
              )
            )
          )
          result -> sPolyEvaluable(
            typeParams = []
            evaluable = SNamedExprValue(
              type = [Int]
              fqn = result
              location = {t-project}/module.smooth:2
              body = SInstantiate(
                typeArgs = <Int>
                polymorphic = SPolyReference(
                  typeScheme = <A>[A]
                  referencedName = myValue
                  location = {t-project}/module.smooth:3
                )
                evaluationType = [Int]
                location = {t-project}/module.smooth:3
              )
            )
          )
    ]
  )
)