
File(
  Blob content,
  String path,
)

@Native("org.smoothbuild.stdlib.bool.NotFunc")
Bool not(Bool value);

Bool and(Bool first, Bool second) = if(first, second, false);

Bool or(Bool first, Bool second) = if(first, true, second);

@Native("org.smoothbuild.stdlib.common.EqualFunc")
Bool equal(A first, A second);

@Bytecode("org.smoothbuild.stdlib.array.ElemFunc")
A elem([A] array, Int index);

@Native("org.smoothbuild.stdlib.array.SizeFunc")
Int size([A] array);

@Native("org.smoothbuild.stdlib.array.ConcatFunc")
[A] concat([[A]] array);

@NativeImpure("org.smoothbuild.stdlib.file.FileFunc")
File file(String path);

@NativeImpure("org.smoothbuild.stdlib.file.FilesFunc")
[File] files(String dir);

@Native("org.smoothbuild.stdlib.file.FilterFilesFunc")
[File] filterFiles([File] files, String pattern);

File jarFile([File] files, String path, Blob manifest = 0x) =
    jar(files, manifest) > File(path);

@Native("org.smoothbuild.stdlib.java.JarFunc")
Blob jar([File] files, Blob manifest = 0x);

[File] javac(
  [File] srcs,
  [File] libs = [],
  String source = "1.8",
  String target = "1.8",
  [String] options = [],
) = javac_(
    srcs = srcs,
    libs = libs,
    options = concat([["-source", source, "-target", target], options]));

@Native("org.smoothbuild.stdlib.java.javac.JavacFunc")
[File] javac_([File] srcs, [File] libs = [], [String] options = []);

@Native("org.smoothbuild.stdlib.java.junit.JunitFunc")
String junit(File tests, [File] deps = [], String include = "**Test.class");

@Native("org.smoothbuild.stdlib.string.ToBlobFunc")
Blob toBlob(String string);

@Native("org.smoothbuild.stdlib.blob.ToStringFunc")
String toString(Blob blob);

@Native("org.smoothbuild.stdlib.java.UnjarFunc")
[File] unjar(Blob jar);

@Native("org.smoothbuild.stdlib.compress.UnzipFunc")
[File] unzip(Blob blob);

@Native("org.smoothbuild.stdlib.compress.ZipFunc")
Blob zip([File] files);

A id(A a) = a;

@Bytecode("org.smoothbuild.stdlib.core.IfFunc")
A if(Bool condition, A then, A else);

@Bytecode("org.smoothbuild.stdlib.core.MapFunc")
[R] map([S] array, (S)->R mapper);

@Bytecode("org.smoothbuild.stdlib.bool.False")
Bool false;

@Bytecode("org.smoothbuild.stdlib.bool.True")
Bool true;
